/*
 * This source file was generated by the Gradle 'init' task
 */
package com.lb;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import io.github.cdimascio.dotenv.Dotenv;

public class App {

    public static void main(String[] args) {
        Dotenv dotenv = Dotenv.load();
        final int port = Integer.parseInt(dotenv.get("PORT"));
        final int threadPoolSize = 4;
        // Initialize the ExecutorService for thread pooling
        ExecutorService executorService = Executors.newFixedThreadPool(threadPoolSize);

        try (ServerSocket serverSocket = new ServerSocket(port)) {
            System.out.println("Server is listening on port " + port);

            /*
             * Infinite while loop - to continuosly accepting connections
             */
            while (true) {
                try {
                    /*
                     * Accept system call is blocking and waits till A SINGLE USER CONNECTS -
                     * so to keep it making it do so,
                     * the infinite while loop
                     */
                    Socket clientSocket = serverSocket.accept();
                    System.out.println("New client connected: " + clientSocket.getInetAddress());

                    executorService.submit(() -> {
                        try {
                            PrintWriter out = new PrintWriter(clientSocket.getOutputStream(), true);
                            out.println("PONG");
                            if (!clientSocket.isClosed()) {
                                clientSocket.close();
                            }
                        } catch (IOException e) {
                            System.out.println(e);
                        }
                    });

                } catch (IOException e) {
                    System.err.println("Error accepting client connection: " + e.getMessage());
                }
            }

        } catch (IOException e) {
            System.err.println("Server error: " + e.getMessage());
        }
    }
}
